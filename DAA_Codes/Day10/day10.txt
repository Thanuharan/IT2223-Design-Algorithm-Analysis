// merge sort
% Main function to perform Merge Sort
function sorted = mergeSort(arr)
    % If the array has 1 or 0 elements, it's already sorted
    if length(arr) <= 1
        sorted = arr;
        return;
    end

    % Find the middle index to split the array
    mid = floor(length(arr) / 2);

    % Recursively sort the left half
    left = mergeSort(arr(1:mid));

    % Recursively sort the right half
    right = mergeSort(arr(mid+1:end));

    % Merge the sorted halves
    sorted = merge(left, right);
end

% Helper function to merge two sorted arrays
function result = merge(left, right)
    result = [];  % Initialize an empty array to hold the result
    i = 1;        % Index for the left array
    j = 1;        % Index for the right array

    % Merge elements in order until one array is exhausted
    while i <= length(left) && j <= length(right)
        if left(i) <= right(j)
            result(end+1) = left(i);  % Append smaller element
            i = i + 1;
        else
            result(end+1) = right(j); % Append smaller element
            j = j + 1;
        end
    end

    % Add remaining elements from left array (if any)
    while i <= length(left)
        result(end+1) = left(i);
        i = i + 1;
    end

    % Add remaining elements from right array (if any)
    while j <= length(right)
        result(end+1) = right(j);
        j = j + 1;
    end
end

% Main function to perform Merge Sort
function sorted = mergeSort(arr)
    % If the array has 1 or 0 elements, it's already sorted
    if length(arr) <= 1
        sorted = arr;
        return;
    end

    % Find the middle index to split the array
    mid = floor(length(arr) / 2);

    % Recursively sort the left half
    left = mergeSort(arr(1:mid));

    % Recursively sort the right half
    right = mergeSort(arr(mid+1:end));

    % Merge the sorted halves
    sorted = merge(left, right);
end

% Helper function to merge two sorted arrays
function result = merge(left, right)
    result = [];  % Initialize an empty array to hold the result
    i = 1;        % Index for the left array
    j = 1;        % Index for the right array

    % Merge elements in order until one array is exhausted
    while i <= length(left) && j <= length(right)
        if left(i) <= right(j)
            result(end+1) = left(i);  % Append smaller element
            i = i + 1;
        else
            result(end+1) = right(j); % Append smaller element
            j = j + 1;
        end
    end

    % Add remaining elements from left array (if any)
    while i <= length(left)
        result(end+1) = left(i);
        i = i + 1;
    end

    % Add remaining elements from right array (if any)
    while j <= length(right)
        result(end+1) = right(j);
        j = j + 1;
    end
end
//Quick sort
function sorted = quickSort(arr)
    % Base case: arrays with 0 or 1 element are already sorted
    if length(arr) <= 1
        sorted = arr;
        return;
    end

    % Choose the pivot (here, the first element)
    pivot = arr(1);

    % Partition: elements less than or equal to pivot go to left
    left = arr(arr < pivot);

    % Elements equal to pivot (to handle duplicates)
    middle = arr(arr == pivot);

    % Elements greater than pivot go to right
    right = arr(arr > pivot);

    % Recursively apply quickSort to left and right, then concatenate
    sorted = [quickSort(left), middle, quickSort(right)];
end

// graphs
s=[1 2] ; %start nodes
t= [2 3]; %end node
G=graph(s,t); % create a graph object
plot(G); %plot the graph
title('Graph'); %add a title

%directed graph
G=digraph([1 2],[2 3]);
plot(GH);
title('Directed Graph-02');